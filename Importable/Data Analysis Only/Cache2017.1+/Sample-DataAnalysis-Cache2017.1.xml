<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="IRIS for Windows (x86-64) 2022.3 (Build 606U)" ts="2023-08-23 11:00:54">
<Class name="Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>66709,37020.7757736</TimeChanged>
<TimeCreated>66584,33039.571867</TimeCreated>

<Method name="CreateReport">
<Description>
Creates a report, stored in the GlobalInvestigationReport and InvestigationMeta tables.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>GrowthPercentageWarning:%Decimal,PeriodWarning:%Integer,HistoryLength:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set allowedGrowthPerDay = GrowthPercentageWarning/PeriodWarning

	&sql(INSERT INTO Sample_DBExpansion_Data.InvestigationMeta
		(GrowthPercentageWarning, HistoryLength, PeriodWarning)
	   	VALUES(:GrowthPercentageWarning, :HistoryLength, :PeriodWarning))
	
	if (SQLCODE '=0)
	{
		set status = $$$ERROR($$$GeneralError, "DB Insert Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
		return status
	}
	set rowID = %ROWID
	
	set query = "SELECT GlobalName, ClassName, AllocatedMB, UsedMB, MetaData->TimeStampEnd, MetaData->FastFlag "_ 
				"FROM Sample_DBExpansion_Data.GlobalAnalysisInfo "_
				"WHERE DATEDIFF('dd', MetaData->TimeStampEnd, GETDATE()) <= ? "_
				"ORDER BY GLOBALNAME ASC , MetaData->TimeStampEnd ASC"
	
	set statement = ##class(%SQL.Statement).%New()
	set status = statement.%Prepare(query)
	set resultSet = statement.%Execute(HistoryLength) //check for sql today.

	if (resultSet.%SQLCODE '=0) ///output error
	{
		set status = $$$ERROR($$$GeneralError, "%Execute failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
		return status
	}
	
	////----------------------------------------------------------------------------------------------------///////////////////////
	//// INITIALIZE VARIABLES 
	////----------------------------------------------------------------------------------------------------///////////////////////
	set currGlobalName = -1
	set currClassName = -1
	set currAllocatedSize = -1
	set currUsedSize = -1
	set currDate = -1 
	set firstDate = -1
	set currFastFlag = -1
	set firstMeasurement = 1 //first measurement of each global
	set maxGrowthNormPercentUsed = 0
	set maxGrowthMBUsed = 0
	set maxGrowthNormPercentAlloc = 0
	set maxGrowthMBAlloc = 0
	set fastFlagAll = 0
	///these do not need to be initialized but done so to avoid the squiggly yellow lines...
	set firstMeasurementUsed = -1
	set firstMeasurementAllocated = -1
	set DecreaseAlloc = 0
	set DecreaseUsed = 0
	
	


	while resultSet.%Next(){ ///note that they will already be ordered by date as well within global as their table insertion is chronological
		

		////----------------------------------------------------------------------------------------------------///////////////////////
		//// SET PREVIOUS Vars
		////----------------------------------------------------------------------------------------------------///////////////////////
		set prevGlobalName = currGlobalName
		set prevClassName = currClassName
		set prevDate = currDate
		set prevUsedSize = currUsedSize
		set prevAllocatedSize = currAllocatedSize
		set prevFastFlag = currFastFlag

		////----------------------------------------------------------------------------------------------------///////////////////////
		//// GET NEW Vars
		////----------------------------------------------------------------------------------------------------///////////////////////
		set currGlobalName = resultSet.%Get("GlobalName")
		set currClassName = resultSet.%Get("ClassName")
		set currDate = resultSet.%Get("TimeStampEnd")
		set currUsedSize = resultSet.%Get("UsedMB")
		set currAllocatedSize = resultSet.%Get("AllocatedMB")
		set currFastFlag = resultSet.%Get("FastFlag")



		////----------------------------------------------------------------------------------------------------///////////////////////
		//// MOVING ON TO NEXT GLOBAL... NEED TO DO ALL COMPARISONS AND FINALIZE ANALYSIS.... attempted to put this in a method but i think it makes the code more difficult to understand (more overhead = 11 parameters... + some processing beforehand) so i kept it like this
		//// firstMeasurement = 0 conditon to make sure first ever iteration not caught in here as no prev global to compare to (set to -1)
		////----------------------------------------------------------------------------------------------------///////////////////////
		if ((prevGlobalName '= currGlobalName) && (firstMeasurement =0)) { ///note this is not caps sensitive.... gets messed up when two globals with same spelling but some caps some not... cause SQL recognize as same
			set lastDate = prevDate
			set lastMeasurementUsed = prevUsedSize
			set lastMeasurementAllocated = prevAllocatedSize
			set histLengthGlobal = ##class(%SYSTEM.SQL.Functions).DATEDIFF("dd", firstDate, lastDate)
		
			
			set historicGrowthUsed = lastMeasurementUsed - firstMeasurementUsed
			set historicGrowthAllocated = lastMeasurementAllocated - firstMeasurementAllocated

		
			////----------------------------------------------------------------------------------------------------///////////////////////
			//// if fastFlagOn for any measurement of a global then it's analysis will be done on allocated exclusively
			////----------------------------------------------------------------------------------------------------///////////////////////
			if (fastFlagAll = 0){

				set historicGrowth = historicGrowthUsed
				set maxGrowthRequestedPeriod = maxGrowthNormPercentUsed * 100
				set maxGrowthMB = maxGrowthMBUsed
	
				set Decrease = DecreaseUsed
			}
			else{ ///ran in fast, get alloc
				
				set historicGrowth = historicGrowthAllocated 
				set maxGrowthRequestedPeriod = maxGrowthNormPercentAlloc * 100
				set maxGrowthMB = maxGrowthMBAlloc
				
				set Decrease = DecreaseAlloc
			}
		
			if (histLengthGlobal = 0) 
			{
				set histLengthGlobal = 1	
			}
			set historicGrowthPerDay = historicGrowth/histLengthGlobal

			set growthForRequestedPeriod = historicGrowthPerDay * PeriodWarning

			if (maxGrowthRequestedPeriod > GrowthPercentageWarning){
				set OverGrew = 1
			}
					
			////----------------------------------------------------------------------------------------------------///////////////////////
			//// COLS / VARS ARE DEFINED AS FOLLOWS 
			//// COL NAME: HistoricGrowthPerDay / VAR NAME: historicGrowthPerDay - defined as total growth over requested history, divided by days passed between last and first measurement. Units: MB/DAY  
			//// COL NAME: MaxGrowthNormalized / VAR NAME: maxGrowthRequestedPeriod - the greatest NORMALIZED PERCENTAGE growth / day  between any two measurements within the history. This means that you take the max growth per day and mutliply by PeriodWarning to make the numbers easily comparable to the user  Units: Normalized %
			////                                       Example of MaxGrowth: if the max growth was determined to be 5% per day over 7 days and the user requested to see a growth of 10% in 10 days then this column will display 5%/day * 10 days = 50% 
			//// COL NAME: MaxGrowthMB / VAR NAME: maxGrowthMB - maximum amount of growth between two measurements (in MB). note that this is independent of time passed unlike the normalized max above. Units: MB
			//// COL NAME: OverGrew / VAR NAME: OverGrew - boolean as to whether the MAXGROWTH (%/DAY) surpassed the allowed growth (converted to a %/DAY equivalence). Units: True/False
			//// COL NAME: AmountGrown / VAR NAME: historicGrowth - the growth from first to last measurement. Units - MB
			//// COL NAME: Decrease / VAR NAME: Decrease - boolean as to whether there was ever a decrease in size between two continual measurements. Units: 1/0
			//// COL NAME: FastFlagAll / VAR NAME: fastFlagAll - boolean that demonstrates if any single measurement for a global was taken in 'fast' mode, meaning that all UsedMB measurements are ignored and only Allocated space will be considered. Units: 1/0
			//// COL NAME: GrowthForRequestedPeriod / VAR NAME: growthForRequestedPeriod - taken as historicGrowthPerDay * PeriodWarning this shows how much MB this would have grown in the requested period had it grown at this rate for that period. to make the numbers more digestible. Units: NORMALIZED MB 
			//// COL NAME: ReportNum / VAR NAME: rowID - corresponds to the ID of the row in the 'Meta' table (Sample_DBExpansion_Data.InvestigationMeta)
			////----------------------------------------------------------------------------------------------------///////////////////////
			
			&sql(Insert into Sample_DBExpansion_Data.GlobalInvestigationReport(ClassName, GlobalName, HistoricGrowthPerDay, MaxGrowthNormalized, MaxGrowthMB, OverGrew, AmountGrown, Decrease, FastFlagAll, GrowthForRequestedPeriod, ReportNum)
	   	 	VALUES (:prevClassName, :prevGlobalName, :historicGrowthPerDay, :maxGrowthRequestedPeriod, :maxGrowthMB,:OverGrew, :historicGrowth, :Decrease, :fastFlagAll, :growthForRequestedPeriod, :rowID))
			if (SQLCODE '=0)
			{
				set status = $$$ERROR($$$GeneralError, "DB Insert Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
				return status
			}		
			
			/// reset firstMeasurement as changing to next global
			set firstMeasurement = 1 
		}
		////----------------------------------------------------------------------------------------------------///////////////////////
		//// RESET ALL STATS
		////----------------------------------------------------------------------------------------------------///////////////////////
		if (firstMeasurement = 1)
			{
				set OverGrew = 0
				set DecreaseAlloc = 0
				set DecreaseUsed = 0
				set maxGrowthNormPercentUsed = 0
				set maxGrowthNormPercentAlloc = 0
				set maxGrowthMBUsed = 0
				set maxGrowthMBAlloc = 0
				set fastFlagAll = currFastFlag
			
				set firstMeasurementUsed = currUsedSize
				set firstMeasurementAllocated = currAllocatedSize
				set firstDate = currDate
				set firstMeasurement = 0
				
				
			}
			else ///COMPARE IN HERE... NOT FIRST MEASUREMENT BUT STILL WITHIN SAME GLOBAL
			{
				set growthMBFromLastMeasurementUsed = currUsedSize - prevUsedSize
				set growthMBFromLastMeasurementAllocated = currAllocatedSize - prevAllocatedSize
				
				if (growthMBFromLastMeasurementAllocated < 0){
					set DecreaseAlloc = 1
				}
				if (growthMBFromLastMeasurementUsed < 0){
					set DecreaseUsed = 1
				}
				
				set currDaysPassed = ##class(%SYSTEM.SQL.Functions).DATEDIFF("dd", prevDate, currDate)
		

				/// to avoid divide by 0 error
				if (currDaysPassed=0){
					set currDaysPassed = 1
				}
				if (prevUsedSize = 0){
					set prevUsedSize = 0.001
				}
				if (prevAllocatedSize = 0){
					set prevAllocatedSize = 0.001
				}

				//// ( percentage growth / day ) * Period Warning = Normalized %. If user requests 10% in 10 days then we can show what the equivalent growth in 10 days would have been as a %
				set currGrowthNormPercentUsed = ((growthMBFromLastMeasurementUsed / prevUsedSize) / currDaysPassed) * PeriodWarning
				set currGrowthNormPercentAlloc = ((growthMBFromLastMeasurementAllocated / prevAllocatedSize) / currDaysPassed) * PeriodWarning



				if (currGrowthNormPercentUsed > maxGrowthNormPercentUsed)
				{
					set maxGrowthNormPercentUsed = currGrowthNormPercentUsed 
				}			
				if (growthMBFromLastMeasurementUsed > maxGrowthMBUsed){
					set maxGrowthMBUsed = growthMBFromLastMeasurementUsed
				}
				
				if (growthMBFromLastMeasurementAllocated > maxGrowthMBAlloc)
				{
					set maxGrowthMBAlloc = growthMBFromLastMeasurementAllocated
				}
				if (currGrowthNormPercentAlloc > maxGrowthNormPercentAlloc)
				{
					set maxGrowthNormPercentAlloc = currGrowthNormPercentAlloc
				}
			
			}
	} /// end while loop
		
		
		////----------------------------------------------------------------------------------------------------///////////////////////
		//// NEED TO DO ANALYSIS FOR FINAL GLOBAL AS IT WILL NOT BE DONE IN THE WHILE LOOP AS THERE IS NO NEXT GLOBAL
		////----------------------------------------------------------------------------------------------------///////////////////////
			set lastDate = prevDate 
			set lastMeasurementUsed = prevUsedSize
			set lastMeasurementAllocated = prevAllocatedSize
			
			set histLengthGlobal = ##class(%SYSTEM.SQL.Functions).DATEDIFF("dd", firstDate, lastDate)
			
			set historicGrowthUsed = lastMeasurementUsed - firstMeasurementUsed
			set historicGrowthAllocated = lastMeasurementAllocated - firstMeasurementAllocated

			if (fastFlagAll = 0){
				set historicGrowth = historicGrowthUsed
				set maxGrowthRequestedPeriod = maxGrowthNormPercentUsed * 100
				set maxGrowthMB = maxGrowthMBUsed
				set Decrease = DecreaseUsed
			}

			else{ ///ran in fast, get alloc
				
				set historicGrowth = historicGrowthAllocated //amount grown
				set maxGrowthRequestedPeriod = maxGrowthNormPercentAlloc * 100
				set maxGrowthMB = maxGrowthMBAlloc
				set Decrease = DecreaseAlloc
			}
			if (histLengthGlobal = 0) 
			{
				set histLengthGlobal = 1	
			}
			set historicGrowthPerDay = historicGrowth/histLengthGlobal

			set growthForRequestedPeriod = historicGrowthPerDay * PeriodWarning

			if (maxGrowthRequestedPeriod > GrowthPercentageWarning){
				set OverGrew = 1
			}
							
			
			&sql(Insert into Sample_DBExpansion_Data.GlobalInvestigationReport(ClassName, GlobalName, HistoricGrowthPerDay, MaxGrowthNormalized, MaxGrowthMB, OverGrew, AmountGrown, Decrease, FastFlagAll, GrowthForRequestedPeriod, ReportNum)
	   	 	VALUES (:prevClassName, :prevGlobalName, :historicGrowthPerDay, :maxGrowthRequestedPeriod, :maxGrowthMB, :OverGrew, :historicGrowth, :Decrease, :fastFlagAll, :growthForRequestedPeriod, :rowID))
			if (SQLCODE '=0)
			{
				set status = $$$ERROR($$$GeneralError, "DB Insert Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
				return status
			}		
			
			

	&sql(
	SELECT SUM(OverGrew) INTO :numGlobalsOverGrew
	FROM Sample_DBExpansion_Data.GlobalInvestigationReport 
	WHERE ReportNum = :rowID
	)
	if (SQLCODE '=0)
	{
		set status = $$$ERROR($$$GeneralError, "Select Sum Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
		return status
	}
	&sql(
	SELECT TOP 1 GlobalName 
	INTO :biggestGrowerGlobal 
	FROM Sample_DBExpansion_Data.GlobalInvestigationReport 
	ORDER BY AmountGrown DESC  
	)
	if (SQLCODE '=0)
	{
		set status = $$$ERROR($$$GeneralError, "Select Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
		return status
	}

	&sql(
		SELECT COUNT(*) INTO :NumberOfMeasurementsInspected 
		FROM Sample_DBExpansion_Data.GlobalAnalysisInfo
		WHERE GlobalName = :biggestGrowerGlobal
	)
	if (SQLCODE '=0)
	{
		set status = $$$ERROR($$$GeneralError, "Select Count(*) Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
		return status
	}

	&sql(
	Update Sample_DBExpansion_Data.InvestigationMeta
	SET NumGlobalsOvergrown = :numGlobalsOverGrew, 
	BiggestGrower = :biggestGrowerGlobal,
	NumberOfMeasurementsInspected = :NumberOfMeasurementsInspected,
	TimeStamp = GETDATE()
	WHERE %ID = :rowID
	)
	if (SQLCODE '=0)
	{
		set status = $$$ERROR($$$GeneralError, "Update Failed, sqlcode: "_SQLCODE_" Message: "_$GET(%msg))
		return status
	}
	
	return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Data.GlobalInvestigationReport">
<Description><![CDATA[
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************
This table will store analysis of the globals that were collected on the data collection phase.
It will be populated by the <Method> InvestigateInfoTask </Method>]]></Description>
<Super>%Persistent</Super>
<TimeChanged>66702,34792.086114</TimeChanged>
<TimeCreated>66612,52356.9009183</TimeCreated>

<Property name="GlobalName">
<Type>%String</Type>
</Property>

<Property name="ClassName">
<Type>%String</Type>
</Property>

<Property name="OverGrew">
<Description>
Whether the global grew more than was permitted when the task parameters were set</Description>
<Type>%Boolean</Type>
</Property>

<Property name="MaxGrowthNormalized">
<Description><![CDATA[
This is the max amount that it has grown between measurements (normalized to the days the task has requested)
<br>
Example: if a global growth (measured every 7 days) was from 100 MB to 110MB to 105MB the max growth is 10MB = 10% / 7 days * how many days person requested (i.e. 10/7 * 30) ]]></Description>
<Type>%Float</Type>
</Property>

<Property name="MaxGrowthMB">
<Description><![CDATA[
Maximum growth represented as MB 
<br>
Note that this is independent of time passed between measurements, unlike the normalized maxgrowth]]></Description>
<Type>%Float</Type>
</Property>

<Property name="HistoricGrowthPerDay">
<Description><![CDATA[
This is a percentage of how much it has grown per day from first measurement to last (wihtin history of parameter of task)
<br>
Example: in the same example as above, the historic growth would be 5% / 14 days]]></Description>
<Type>%Float</Type>
</Property>

<Property name="GrowthForRequestedPeriod">
<Description><![CDATA[
This is the growth per day (from first to last) multiplied by the period warning to make the numbers more digestible 
<br>
Example: as per the examples above and assuming the input parameters had requested to look out for a growth of more than 15% in 30 days we would see that this becomes (5% /14days) * 30 days = 10.7% ]]></Description>
<Type>%Float</Type>
</Property>

<Property name="AmountGrown">
<Description>
Growth but as an amount not a percentage (MB)</Description>
<Type>%Float</Type>
</Property>

<Property name="FastFlagAll">
<Description>
Technically 2 tasks could be built, one that runs fast and one slow for the same table, then we need to know when summing sizes whether to account for allocated or used. if this is true at least some data was collected with fast method and allocated sizes will be used</Description>
<Type>%Boolean</Type>
</Property>

<Property name="Decrease">
<Description>
Whether the global has ever decreased in size as per measurements, indicates purge working to some degree</Description>
<Type>%Boolean</Type>
</Property>

<Property name="ReportNum">
<Description>
Analogous to metaID in data collection task, will correspond to which metadata this belongs</Description>
<Type>%Integer</Type>
</Property>

<ForeignKey name="InvestigationMetaFK">
<OnDelete>cascade</OnDelete>
<Properties>ReportNum</Properties>
<ReferencedClass>Sample.DBExpansion.Data.InvestigationMeta</ReferencedClass>
</ForeignKey>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.DBE95BC.GlobalInves8D80D</DataLocation>
<DefaultData>GlobalInvestigationReportDefaultData</DefaultData>
<IdLocation>^Sample.DBE95BC.GlobalInves8D80D</IdLocation>
<IndexLocation>^Sample.DBE95BC.GlobalInves8D80I</IndexLocation>
<StreamLocation>^Sample.DBE95BC.GlobalInves8D80S</StreamLocation>
<ExtentSize>304</ExtentSize>
<Data name="GlobalInvestigationReportDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>GlobalName</Value>
</Value>
<Value name="3">
<Value>ClassName</Value>
</Value>
<Value name="4">
<Value>OverGrew</Value>
</Value>
<Value name="5">
<Value>MaxGrowth</Value>
</Value>
<Value name="6">
<Value>HistoricGrowth</Value>
</Value>
<Value name="7">
<Value>GrowthForRequestedPeriod</Value>
</Value>
<Value name="8">
<Value>Decrease</Value>
</Value>
<Value name="9">
<Value>MetaData</Value>
</Value>
<Value name="10">
<Value>ReportNum</Value>
</Value>
<Value name="11">
<Value>FastFlagOffAll</Value>
</Value>
<Value name="12">
<Value>FastFlagAll</Value>
</Value>
<Value name="13">
<Value>AmountGrown</Value>
</Value>
<Value name="14">
<Value>HistoricGrowthPerDay</Value>
</Value>
<Value name="15">
<Value>MaxGrowthNormalized</Value>
</Value>
<Value name="16">
<Value>MaxGrowthMB</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
</Property>
<Property name="AmountGrown">
<Selectivity>0.6579%</Selectivity>
<OutlierSelectivity>.960526:0</OutlierSelectivity>
<AverageFieldSize>2.61</AverageFieldSize>
</Property>
<Property name="ClassName">
<Selectivity>1.0881%</Selectivity>
<OutlierSelectivity>.717105:</OutlierSelectivity>
<AverageFieldSize>8.89</AverageFieldSize>
</Property>
<Property name="Decrease">
<Selectivity>1.9737%</Selectivity>
<OutlierSelectivity>.980263:0</OutlierSelectivity>
<AverageFieldSize>2.02</AverageFieldSize>
</Property>
<Property name="FastFlagAll">
<Selectivity>0.6579%</Selectivity>
<OutlierSelectivity>.993421:0</OutlierSelectivity>
<AverageFieldSize>2.01</AverageFieldSize>
</Property>
<Property name="GlobalName">
<Selectivity>0.6579%</Selectivity>
<AverageFieldSize>19.28</AverageFieldSize>
</Property>
<Property name="GrowthForRequestedPeriod">
<Selectivity>0.6579%</Selectivity>
<OutlierSelectivity>.960526:0</OutlierSelectivity>
<AverageFieldSize>2.32</AverageFieldSize>
</Property>
<Property name="HistoricGrowthPerDay">
<Selectivity>0.6579%</Selectivity>
<OutlierSelectivity>.960526:0</OutlierSelectivity>
<AverageFieldSize>2.31</AverageFieldSize>
</Property>
<Property name="MaxGrowthMB">
<Selectivity>0.6579%</Selectivity>
<OutlierSelectivity>.973684:0</OutlierSelectivity>
<AverageFieldSize>2.05</AverageFieldSize>
</Property>
<Property name="MaxGrowthNormalized">
<Selectivity>0.6579%</Selectivity>
<OutlierSelectivity>.973684:0</OutlierSelectivity>
<AverageFieldSize>2.19</AverageFieldSize>
</Property>
<Property name="OverGrew">
<Selectivity>2.6316%</Selectivity>
<OutlierSelectivity>.973684:0</OutlierSelectivity>
<AverageFieldSize>2.03</AverageFieldSize>
</Property>
<Property name="ReportNum">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-12</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.DBExpansion.Data.InvestigationMeta">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************
Metadata of GlobalInvestigationReport Table</Description>
<Super>%Persistent</Super>
<TimeChanged>66702,39535.7521482</TimeChanged>
<TimeCreated>66612,56421.9262722</TimeCreated>

<Property name="NumGlobalsOvergrown">
<Description>
Number of globals that grew more than permitted</Description>
<Type>%Integer</Type>
</Property>

<Property name="BiggestGrower">
<Description>
Global that grew the most (by AmountGrown, measured in MB)</Description>
<Type>%String</Type>
</Property>

<Property name="GrowthPercentageWarning">
<Description>
Parameter user inputted to run task. Growing above this percentage will trigger the OverGrown flag</Description>
<Type>%Decimal</Type>
</Property>

<Property name="PeriodWarning">
<Description>
How many days to set as the limit for GrowthPercentageWarning. If GrowthPercentageWarning was 10% and PeriodWarning was 5 then the allowed growth would be an equivalent of 10% in 5 days. </Description>
<Type>%Integer</Type>
</Property>

<Property name="HistoryLength">
<Description>
How many days back to investigate.</Description>
<Type>%Integer</Type>
</Property>

<Property name="TimeStamp">
<Type>%TimeStamp</Type>
</Property>

<Property name="NumberOfMeasurementsInspected">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Description>
what kind of things do we want in here?</Description>
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.DBE95BC.Investigati7DEBD</DataLocation>
<DefaultData>InvestigationMetaDefaultData</DefaultData>
<IdLocation>^Sample.DBE95BC.Investigati7DEBD</IdLocation>
<IndexLocation>^Sample.DBE95BC.Investigati7DEBI</IndexLocation>
<StreamLocation>^Sample.DBE95BC.Investigati7DEBS</StreamLocation>
<ExtentSize>1</ExtentSize>
<Data name="InvestigationMetaDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NumGlobalsOvergrown</Value>
</Value>
<Value name="3">
<Value>BiggestGlobal</Value>
</Value>
<Value name="4">
<Value>BiggestGrower</Value>
</Value>
<Value name="5">
<Value>GrowthPercentageWarning</Value>
</Value>
<Value name="6">
<Value>PeriodWarning</Value>
</Value>
<Value name="7">
<Value>HistoricLength</Value>
</Value>
<Value name="8">
<Value>TimeStamp</Value>
</Value>
<Value name="9">
<Value>NumberOfMeasurementsInspected</Value>
</Value>
<Value name="10">
<Value>HistoryLength</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="BiggestGrower">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>33</AverageFieldSize>
</Property>
<Property name="GrowthPercentageWarning">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="HistoryLength">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="NumGlobalsOvergrown">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="NumberOfMeasurementsInspected">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="PeriodWarning">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="TimeStamp">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>21</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.DBExpansion.Task.InvestigateInfoTask">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************
Task that will investigate global growth</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>66702,40641.030406</TimeChanged>
<TimeCreated>66584,33273.250529</TimeCreated>

<Parameter name="TaskName">
<Default>Report Global Size Anomalies</Default>
</Parameter>

<Property name="GrowthPercentageWarning">
<Description>
This is the 'limit' of growth we want to allow (as a percentage). Anything above this will be categorized as overgown.</Description>
<Type>%Decimal</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="PeriodWarning">
<Description>
Amount of days to permit the GrowthPercentageWarning growth to take.
must be at least one since the growth gets converted to an amount per day (i.e. we divide by this number)</Description>
<Type>%Integer</Type>
<InitialExpression>7</InitialExpression>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="HistoryLength">
<Description>
How far back to go check, in days </Description>
<Type>%Integer</Type>
<InitialExpression>30</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ..PeriodWarning < 0 {
		return $$$ERROR($$$GeneralError, "PeriodWarning Must be at least 1") ///note than minval does not enforce this value, merely warns user before attempting to run task
	}
	elseif ..HistoryLength < 0	{
		return $$$ERROR($$$GeneralError, "HistoryLength must be at least 0") ///note than minval does not enforce this value, merely warns user before attempting to run task
	}
	
	/// if got to here then it is fine to run
	/// set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).Investigate(..GrowthPercentageWarning, ..PeriodWarning, ..HistoryLength)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).CreateReport(..GrowthPercentageWarning, ..PeriodWarning, ..HistoryLength)
	return st
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Test.InspectTest">
<Super>%UnitTest.TestCase</Super>
<TimeChanged>66674,63060.4749586</TimeChanged>
<TimeCreated>66584,36168.8222725</TimeCreated>

<Property name="GlobalMoment1">
<Type>Sample.DBExpansion.Data.GlobalAnalysisInfo</Type>
</Property>

<Property name="FakeDB1">
<Type>Sample.DBExpansion.Data.DBAnalysisInfo</Type>
</Property>

<Property name="GlobalMoment2">
<Type>Sample.DBExpansion.Data.GlobalAnalysisInfo</Type>
</Property>

<Property name="FakeDB2">
<Type>Sample.DBExpansion.Data.DBAnalysisInfo</Type>
</Property>

<Property name="GlobalMoment3">
<Type>Sample.DBExpansion.Data.GlobalAnalysisInfo</Type>
</Property>

<Property name="FakeDB3">
<Type>Sample.DBExpansion.Data.DBAnalysisInfo</Type>
</Property>

<Property name="GlobalMoment4">
<Type>Sample.DBExpansion.Data.GlobalAnalysisInfo</Type>
</Property>

<Property name="FakeDB4">
<Type>Sample.DBExpansion.Data.DBAnalysisInfo</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// due to foreign key all globals need to be linked to db...

]]></Content>
</UDLText>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		set fakeDB1 = ##class(Sample.DBExpansion.Data.DBAnalysisInfo).%New()
		set fakeDB1.DatabaseName = "FakeTestDB"
		set fakeDB1.TimeStampEnd = $ZDATETIME($HOROLOG-15,3) // 15 days ago
		set fakeDB1.FastFlag = 1
		set st = fakeDB1.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}
		set ..FakeDB1 = fakeDB1
		set db1ID = fakeDB1.%Id()
		
		
		set globalMoment1 = ##class(Sample.DBExpansion.Data.GlobalAnalysisInfo).%New()
		set globalMoment1.AllocatedMB = 100
		set globalMoment1.ClassName = "MyTestClass"
		set globalMoment1.GlobalName = "TestGlobal"
		
		set globalMoment1.MetaData = fakeDB1
		
		///set globalMoment1.TimeStamp = $ZDATETIME($HOROLOG-15,3) //15 days ago
		set globalMoment1.UsedMB = 100
		set st = globalMoment1.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}
		
		set ..GlobalMoment1 = globalMoment1


		set fakeDB2 = ##class(Sample.DBExpansion.Data.DBAnalysisInfo).%New()
		set fakeDB2.DatabaseName = "FakeTestDB"
		set fakeDB2.TimeStampEnd = $ZDATETIME($HOROLOG-10,3) //10 days ago
		set fakeDB2.FastFlag = 0
		set st = fakeDB2.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}
		set ..FakeDB2 = fakeDB2
		set db2ID = fakeDB2.%Id()
		

		set globalMoment2 = ##class(Sample.DBExpansion.Data.GlobalAnalysisInfo).%New()
		set globalMoment2.AllocatedMB = 200
		set globalMoment2.ClassName = "MyTestClass"
		set globalMoment2.GlobalName = "TestGlobal"
		set globalMoment2.MetaData = fakeDB2
		///set globalMoment2.TimeStamp = $ZDATETIME($HOROLOG-10,3) //10 days ago
		set globalMoment2.UsedMB = 	110
		set st = globalMoment2.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}
		set ..GlobalMoment2 = globalMoment2
		
		
		
		
		set fakeDB3 = ##class(Sample.DBExpansion.Data.DBAnalysisInfo).%New()
		set fakeDB3.DatabaseName = "FakeTestDB"
		set fakeDB3.TimeStampEnd = $ZDATETIME($HOROLOG-5,3) //5 days ago
		set fakeDB3.FastFlag = 0
		set st = fakeDB3.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}
		set ..FakeDB3 = fakeDB3
		
		set db3ID = fakeDB3.%Id()


		
		set globalMoment3 = ##class(Sample.DBExpansion.Data.GlobalAnalysisInfo).%New()
		set globalMoment3.AllocatedMB = 50
		set globalMoment3.ClassName = "MyTestClass"
		set globalMoment3.GlobalName = "TestGlobal"
		set globalMoment3.MetaData = fakeDB3
		set globalMoment3.UsedMB = 	45
		set st = globalMoment3.%Save()

		if $$$ISERR(st)
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}

		set ..GlobalMoment3 = globalMoment3
		
		////global moment 4
		set fakeDB4 = ##class(Sample.DBExpansion.Data.DBAnalysisInfo).%New()
		set fakeDB4.DatabaseName = "FakeTestDB"
		set fakeDB4.TimeStampEnd = $ZDATETIME($HOROLOG,3) //5 days ago
		set fakeDB4.FastFlag = 0
		set st = fakeDB4.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}
		set ..FakeDB4 = fakeDB4
		
		set db4ID = fakeDB4.%Id()


		
		set globalMoment4 = ##class(Sample.DBExpansion.Data.GlobalAnalysisInfo).%New()
		set globalMoment4.AllocatedMB = 125
		set globalMoment4.ClassName = "MyTestClass"
		set globalMoment4.GlobalName = "TestGlobal"
		set globalMoment4.MetaData = fakeDB4
		set globalMoment4.UsedMB = 	121
		set st = globalMoment4.%Save()

		if $$$ISERR(st)
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}

		set ..GlobalMoment4 = globalMoment4





		Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestGlobalSizeHistory">
<Implementation><![CDATA[
	
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).CreateReport(20,10,300)
	do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen

	
	&sql(SELECT AmountGrown, Decrease, FastFlagAll, GrowthForRequestedPeriod, HistoricGrowthPerDay, MaxGrowthMB, MaxGrowthNormalized, OverGrew, ReportNum 
	INTO :myAmountGrown, :myDecrease, :myFastFlagAll, :myGrowthForRequestedPeriod, :myHistoricGrowthPerDay, :myMaxGrowthMB, :myMaxGrowthNormalized, :myOverGrew, :myReportNum
	FROM Sample_DBExpansion_Data.GlobalInvestigationReport
	WHERE ClassName = 'MyTestClass'
	)
	
	do $$$AssertEquals(myAmountGrown, 25)
	do $$$AssertEquals(myDecrease, 1)
	
	do $$$AssertEquals(myFastFlagAll, 1)
	do $$$AssertEquals(myGrowthForRequestedPeriod, 16.66666666666666667)
	do $$$AssertEquals(myHistoricGrowthPerDay, 1.666666666666666667)
	do $$$AssertEquals(myMaxGrowthMB, 100)
	do $$$AssertEquals(myMaxGrowthNormalized, 300)
	do $$$AssertEquals(myOverGrew, 1)
		
	
	#; &sql(DELETE FROM Sample_DBExpansion_Data.GlobalInvestigationReport WHERE ID = :myReportNum)
	
	#; write !!!, "ROW ID IS: "_%ROWID
	
	


	///check to see that testglobal is as expected... data collected... etc.

	//set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalGrowthPerDay(..GlobalMoment1.GlobalName, 20, .growthPerDayAll) 
	//set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalGrowthCheck("TestGlobal","MyTestClass", 15,10, 30, 1)
	//do $$$AssertEquals(growthPerDayAll, 2.1)
	//set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalGrowthPerDay(..GlobalMoment2.GlobalName, 14, .growthPerDayNewewst) //don't include anything 15 days or older
	//do $$$AssertEquals(growthPerDayNewewst, 2)
	//set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalGrowthPerDay(..GlobalMoment3.GlobalName, 7, .growthPerDayOne) //if there is just one global in the recent history there is no growth
	//do $$$AssertEquals(growthPerDayOne, 0)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method TestIncreaseAlert()
{
	//only comparing between "usedmb"
	set ..FakeDB1.FastFlag = 0
	set ..FakeDB2.FastFlag = 0
	set ..FakeDB3.FastFlag = 0
	
	
	//test all data/global points (3)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName, 1, 20, 30, .globalIncreaseAlertFlagAll)
	do $$$AssertNotEquals(globalIncreaseAlertFlagAll,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,50,20,30, .globalIncreaseAlertNoFlagAll) //should be no flag (2.5%perday)
	do $$$AssertEquals(globalIncreaseAlertNoFlagAll,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,31.5,15,15, .globalIncreaseAlertFlagEdge) //growth in last 15 days was 2.1% per day (31.5% over 15 days)
	do $$$AssertNotEquals(globalIncreaseAlertFlagEdge,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,32,15,15, .globalIncreaseAlertNoFlagEdge) // 32/15 is more growth per day than we have seen, should see no flag
	do $$$AssertEquals(globalIncreaseAlertNoFlagEdge,0)
	
	//test varying amount of data points
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,29, 14, 14, .globalIncreaseAlertFlagRecent) //-14 days to now it is 2% not 2.1% increase per day, 29/14 is > 2, <2.1
	do $$$AssertEquals(globalIncreaseAlertFlagRecent,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,10, 7, 14, .globalIncreaseAlertFlagRecent2) ///10/7%  (<2) per day in last 14 days but actual data shows 2 % so should raise flag
	do $$$AssertNotEquals(globalIncreaseAlertFlagRecent2,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,50, 25, 10, .globalIncreaseAlertNoFlagRecent) //(50/25)=2% per day in last 10 days
	do $$$AssertNotEquals(globalIncreaseAlertNoFlagRecent,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,21, 10, 10, .globalIncreaseAlertNoFlagRecent2) //2% per day in last 10 days, not 21/10 = 2.1
	do $$$AssertEquals(globalIncreaseAlertNoFlagRecent2,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.0001, 1, 7, .globalIncreaseAlertNoFlagSingle) //only one measurement in last 5 days,  no relative increase.
	do $$$AssertEquals(globalIncreaseAlertNoFlagSingle,0)
	
	
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.0001, 1, 3, .globalIncreaseAlertNoFlagNone) //test when there is no data
	do $$$AssertEquals(globalIncreaseAlertNoFlagNone,0)
	
	//now we will introduce a new data point where the global size will have gone back to it's original size
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 15, .globalIncreaseAlertNoIncreasePre) //-14 days to now it is 2% not 2.1% increase per day
	do $$$AssertNotEquals(globalIncreaseAlertNoIncreasePre,0)
	
	//need to to enter 4th db entry to enable entry of 4th global entry
	set fakeDB4 = ##class(Sample.DBExpansion.Data.DBAnalysisInfo).%New()
	set fakeDB4.DatabaseName = "FakeTestDB"
	set fakeDB4.TimeStampEnd =  $ZDATETIME($HOROLOG,3) ///now 
	set fakeDB4.FastFlag = 0
	set st = fakeDB4.%Save()
	if st'=1 
	{
		do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
	}
	set db4ID = fakeDB4.%Id()
	
	set globalMoment4 = ##class(Sample.DBExpansion.Data.GlobalAnalysisInfo).%New()
	set globalMoment4.AllocatedMB = 200
	set globalMoment4.ClassName = "MyTestClass"
	set globalMoment4.GlobalName = "TestGlobal"
	///set globalMoment4.TimeStamp = $ZDATETIME($HOROLOG,3)
	set globalMoment4.UsedMB = 100
	set globalMoment4.MetaData = db4ID
	set st = globalMoment4.%Save()
	if st'=1 
	{
		do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
	}
	
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 15, .globalIncreaseAlertNoIncrease1) //no growth in 15 days
	do $$$AssertEquals(globalIncreaseAlertNoIncrease1,0)
	//negative increase (decrease) should not raise flags...
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 10, .globalIncreaseAlertNoIncrease2) //negative growth in 10 days
	do $$$AssertEquals(globalIncreaseAlertNoIncrease2,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 5,5, .globalIncreaseAlertNoIncrease3) //negative growth in 5 days
	do $$$AssertEquals(globalIncreaseAlertNoIncrease3,0)
	
	// now check that in last 15 days there is growth but not in last 10 days or 5
	set globalMoment4.UsedMB = 110
	set st = globalMoment4.%Save()
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 15, .globalIncreaseAlertNoIncrease4) // growth in 15 days
	do $$$AssertNotEquals(globalIncreaseAlertNoIncrease4,0)
	//negative increase (decrease) should not raise flags...
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 10, .globalIncreaseAlertNoIncrease5) //negative growth in 10 days
	do $$$AssertEquals(globalIncreaseAlertNoIncrease5,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 5,5, .globalIncreaseAlertNoIncrease6) //no growth in 5 days
	do $$$AssertEquals(globalIncreaseAlertNoIncrease6,0)
	
	//now that in last 15 and 10 days there is growth but not in last 5
	set globalMoment4.UsedMB = 121
	set st = globalMoment4.%Save()
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 15, .globalIncreaseAlertNoIncrease7) //no growth in 15 days
	do $$$AssertNotEquals(globalIncreaseAlertNoIncrease7,0)
	//negative increase (decrease) should not raise flags...
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 10, 10, .globalIncreaseAlertNoIncrease8) // growth in 10 days
	do $$$AssertNotEquals(globalIncreaseAlertNoIncrease8,0)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalIncreaseAlert(..GlobalMoment1.GlobalName,0.000001, 5,5, .globalIncreaseAlertNoIncrease9) //no growth in 5 days
	do $$$AssertEquals(globalIncreaseAlertNoIncrease9,0)
}
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
Method TestFastFlagComparison()
{
	set ..FakeDB1.FastFlag = 1
	set ..FakeDB2.FastFlag = 0
	set ..FakeDB3.FastFlag = 0
	
	//check that from 15 days ago to today grew by 50mb (allocated)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalGrowthPerDay(..GlobalMoment1.GlobalName, 20, .flagTest1) ///compare this result with first test of TestGlobalSizeHistory
	//used mb grew 2.1% per day but allocated grew 3.33, we want to confirm we are getting the allocated mb comparison b/c one is with fast flag.
	do $$$AssertEquals(flagTest1,3.33)
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.InvestigateInfo).GlobalGrowthPerDay(..GlobalMoment1.GlobalName,10, .flagTest2)
	do $$$AssertEquals(flagTest2,2)
}
*/
]]></Content>
</UDLText>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
	&sql(DELETE FROM Sample_DBExpansion_Data.GlobalAnalysisInfo
    WHERE (GlobalName = 'TestGlobal'))
	
	&sql(DELETE FROM Sample_DBExpansion_Data.DBAnalysisInfo WHERE (DatabaseName = 'FakeTestDB'))
	

	&sql(DELETE FROM Sample_DBExpansion_Data.InvestigationMeta WHERE BiggestGrower = 'TestGlobal')
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<Description><![CDATA[
Run by <B>RunTest</B> immediately after each test method in the test class is run.<br>
<dl>
<dt><i>testname</i>
<dd>Name of the test to be run. Required. 
</dl> ]]></Description>
<FormalSpec>testname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//want to reset our flags each time...
	//set ..FakeDB1.FastFlag = 0
	//set ..FakeDB2.FastFlag = 0
	//set ..FakeDB3.FastFlag = 0
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Test.RESTAPITest">
<Super>%UnitTest.TestCase</Super>
<TimeChanged>66660,48116.6588709</TimeChanged>
<TimeCreated>66584,41010.1364535</TimeCreated>

<Method name="TestEndPoints">
<Implementation><![CDATA[
		set httprequest = ##class(%Net.HttpRequest).%New()
		set httprequest.Port = ^%SYS("WebServer","Port")
		
		/// this is to test that it is password protected byt have not figured out way to get UI to work with password....
		
		#; do httprequest.Get("/Sample/dbAnalysis/globals/all")
		#; do $$$AssertEquals(httprequest.HttpResponse.StatusCode, 401)
		
		set httprequest.Username = "aglikman" //NOT DYNAMIC
		set httprequest.Password = "1234"
		do httprequest.Get("/Sample/dbAnalysis/globals/all")
		do $$$AssertEquals(httprequest.HttpResponse.StatusCode, 200)
		
		do httprequest.Get("/Sample/dbAnalysis/global/Ens.Alarm")
		do $$$AssertEquals(httprequest.HttpResponse.StatusCode, 200)
		
		do httprequest.Get("/Sample/dbAnalysis/db/history")
		do $$$AssertEquals(httprequest.HttpResponse.StatusCode, 200)
		
		do httprequest.Get("/Sample/dbAnalysis/globals/table/1000")
		do $$$AssertEquals(httprequest.HttpResponse.StatusCode, 200)
]]></Implementation>
</Method>

<Method name="TestResponses">
<Implementation><![CDATA[	///?
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Util.REST.impl">
<Description><![CDATA[
Retrieve Data of Globals Tables and DB Tables stored in IRIS database<br/>
Business logic class defined by OpenAPI in Sample.DBExpansion.Util.REST.spec<br/>
Updated Aug 23, 2023 10:19:26]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%REST.Impl</Super>
<TimeChanged>66709,37166.3945528</TimeChanged>
<TimeCreated>66584,33555.0638131</TimeCreated>

<Parameter name="ExposeServerExceptions">
<Description>
If ExposeServerExceptions is true, then details of internal errors will be exposed.</Description>
<Default>0</Default>
</Parameter>

<Method name="getUniqueGlobal">
<Description><![CDATA[
Get stats on one particular database<br/>
The method arguments hold values for:<br/>
    globalName, nameofglobal<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
	set obj = {"data": []}
	set statement = ##class(%SQL.Statement).%New()
	#; set query = "SELECT GB.GlobalName, GB.ClassName, GB.UsedMB, GB.AllocatedMB, DB.TimeStampEnd FROM Sample_DBExpansion_Data.DBAnalysisInfo AS DB INNER JOIN Sample_DBExpansion_Data.GlobalAnalysisInfo AS GB ON DB.ID = GB.MetaDataID WHERE GlobalName = ?"
	set query = "SELECT GlobalName, ClassName, UsedMB, AllocatedMB, MetaData->TimeStampEnd FROM Sample_DBExpansion_Data.GlobalAnalysisInfo Where GlobalName = ?"
	set status = statement.%Prepare(query)
	set rs = statement.%Execute(globalName)
		while rs.%Next(){
			set name = "GlobalName"
			if ($length(rs.%Get("ClassName")) > 1)
			{
				set name = "ClassName"
			}
			set global = {
				"Name": (rs.%Get(name)),
				"UsedMB": (rs.%Get("UsedMB")),
				"Date": (rs.%Get("TimeStampEnd")),
				"UsedMB": ((rs.%Get("UsedMB"))),
				"AllocatedMB": (rs.%Get("AllocatedMB"))
			}
			
			do obj.data.%Push(global)
		}
		d obj.%ToJSON()
		///set %response.Status = "200"
	
	Quit obj
]]></Implementation>
</Method>

<Method name="getDBHistory">
<Description>
Get stats on single db in table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec/>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
    set obj = {"data": []}
	set query = "SELECT * FROM Sample_DBExpansion_Data.DBAnalysisInfo"
	set statement = ##class(%SQL.Statement).%New()
	set status = statement.%Prepare(query)
	set rs = statement.%Execute() //when use question mark on query and try to use input here having error
	while rs.%Next(){
		set DBHistory = {
			"Name": (rs.%Get("DatabaseName")),
            "Date": (rs.%Get("TimeStampEnd")),
            "DBUsedSize": (rs.%Get("DBUsedSize")),	
            "DBAllocSize": (+rs.%Get("DBAllocatedSize")) //+ here to change it from string with units to just value, will need to proof this... depends on expected sizes
		}
		
		do obj.data.%Push(DBHistory)
	}
	d obj.%ToJSON()
	Quit obj
]]></Implementation>
</Method>

<Method name="getAllGlobals">
<Description>
Get stats on all globals in table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec/>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
	&sql(SELECT MAX(MetaData) INTO :metaID FROM Sample_DBExpansion_Data.GlobalAnalysisInfo)
	set obj = {"data": []}
	
	set query = "SELECT * From Sample_DBExpansion_Data.GlobalAnalysisInfo WHERE MetaData = ?"
	set statement = ##class(%SQL.Statement).%New()
	set status = statement.%Prepare(query)
	set rs = statement.%Execute(metaID)

	while rs.%Next(){
		set name = "GlobalName"
		if ($length(rs.%Get("ClassName")) > 1)
		{
			set name = "ClassName"
		}
		set global = {
			"Name": (rs.%Get(name)), //will display classname if exists, if not global name
            "UsedMB": (rs.%Get("UsedMB")),
			"AllocatedMB": (rs.%Get("AllocatedMB"))
		}
		
		do obj.data.%Push(global)
	}
	/// d obj.%ToJSON()
	Quit obj
]]></Implementation>
</Method>

<Method name="getAllGlobalsTable">
<Description><![CDATA[
Get stats on one particular database<br/>
The method arguments hold values for:<br/>
    timeback, days back to look<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>timeback:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
	try{
	set obj = {"data": []}
	
	set statement1 = ##class(%SQL.Statement).%New()
	set query1 = "SELECT Distinct(GlobalName) From Sample_DBExpansion_Data.GlobalAnalysisInfo"
	set status1 = statement1.%Prepare(query1)
	set rs1 = statement1.%Execute()
		while rs1.%Next(){
			set globalName = rs1.%Get("GlobalName")
			set statement2 = ##class(%SQL.Statement).%New()
			set query2 = "SELECT MIN(MetaData) AS MINID, MAX(MetaData) AS MAXID FROM Sample_DBExpansion_Data.GlobalAnalysisInfo WHERE GlobalName = ? AND DATEDIFF('dd', MetaData->TimeStampEnd, GETDATE()) <= ?"
			set status2 = statement2.%Prepare(query2)
			set rs2 = statement2.%Execute(globalName, timeback)
	 		while rs2.%Next(){
	 			set minMetaID = rs2.%Get("MINID")
	 			set maxMetaID = rs2.%Get("MAXID")
	 		}
	 		set statement3 = ##class(%SQL.Statement).%New()
	 		set query3 = "SELECT ClassName, UsedMB, AllocatedMB, MetaData->TimeStampEnd FROM Sample_DBExpansion_Data.GlobalAnalysisInfo WHERE GlobalName = ? AND MetaData = ?"
	 		set status3 = statement3.%Prepare(query3)
	 		set rs3 = statement3.%Execute(globalName, minMetaID)
	 		while rs3.%Next()
	 		{
	 			set oldAllocMB  = rs3.%Get("AllocatedMB")
	 			set oldUsedMB  = rs3.%Get("UsedMB")
	 			set oldDate = rs3.%Get("TimeStampEnd")
	 		}
			
	 		set rs4 = statement3.%Execute(globalName, maxMetaID)
	 		while rs4.%Next()
	 		{
	 		///	set newAllocMB  = rs4.%Get("AllocatedMB")
	 			set newMB  = rs4.%Get("UsedMB")
	 			set newDate = rs4.%Get("TimeStampEnd")
	 			set className = rs4.%Get("ClassName")
	 		}
			
	 		try{
	 			set change = ((newMB - oldUsedMB)/oldUsedMB)*100
	 		}
	 		catch ex
	 		{
	 			set change = 0
	 		}
	 		set change = $DECIMAL(change, 4)
	 		set global = {
	 		"Name": (globalName), //will display classname if exists, if not global name
             "ClassName": (className),
	 		"OldMB": (oldUsedMB),
	 		"OldDate": (oldDate),
	 		"NewMB": (newMB),
	 		"NewDate": (newDate),
	 		"Change": (change)
	 	}
		
	 	do obj.data.%Push(global)
		}
		Do ..%SetStatusCode(200)
		return obj
	}
	catch error
	{
		Do ..%SetStatusCode(400)
		return "Check that there is data for the dates entered"
	}
]]></Implementation>
</Method>
</Class>




<Class name="Sample.DBExpansion.Util.REST.spec">
<ProcedureBlock>1</ProcedureBlock>
<Super>%REST.Spec</Super>
<TimeChanged>66702,52282.2450295</TimeChanged>
<TimeCreated>66584,34008.0913357</TimeCreated>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<XData name="OpenAPI">
<MimeType>application/json</MimeType>
<Data><![CDATA[
{
  "swagger":"2.0",
  "info":{
    "description":"Retrieve Data of Globals Tables and DB Tables stored in IRIS database",
    "version":"1.0.0",
    "title":"DB Analysis REST API"
  },
  "basePath":"/dbAnalysis",
  "schemes":[
    "http"
  ],
  "paths":{
    "/globals/all":{
      "get":{
        "x-ISC_CORS":true, 
        "summary":"Get globals info",
        "description":"Get stats on all globals in table",
        "operationId":"getAllGlobals",
        "produces":[
          "application/json"
        ],
        "responses":{
          "200":{
            "description":"OK"
          }
        }
      }
    },
    "/global/{globalName}":{
      "get":{
        "x-ISC_CORS":true,
        "summary":"Get info on one global",
        "description":"Get stats on one particular database",
        "operationId":"getUniqueGlobal",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"globalName",
            "in":"path",
            "description":"nameofglobal",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK"
          }
        }
      }
    },
        "/globals/table/{timeback}":{
      "get":{
        "x-ISC_CORS":true,
        "summary":"Get info on one global",
        "description":"Get stats on one particular database",
        "operationId":"getAllGlobalsTable",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"timeback",
            "in":"path",
            "description":"days back to look",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK"
          }
        }
      }
    },
    "/db/history":{
      "get":{
        "x-ISC_CORS":true,
        "summary":"Get info on one db",
        "description":"Get stats on single db in table",
        "operationId":"getDBHistory",
        "x-ISC_CORS":true,
        "produces":[
          "application/json"
        ],
        "responses":{
          "200":{
            "description":"OK"
          }
        }
      }
    }
  }
}
]]></Data>
</XData>
</Class>
</Export>
